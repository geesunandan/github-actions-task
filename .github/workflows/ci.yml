name: CI/CD
on:
  push:
    branches:
      - 'master'
  pull_request:
    branches:
      - 'master'
  workflow_dispatch:
 
env:
  CI: false
  env_master: ${{ secrets.ENV_MASTER }}
 
jobs:
  lint-test:
    name: lint && test
    runs-on: ubuntu-latest
 
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
 
      - name: Install dependencies
        run: yarn install
 
      - name: Check Lint
        run: yarn lint
 
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
 
      - name: Setup Test DB
        run: |
          docker compose -f docker-compose-test.yaml up -d
 
      - name: Run Test
        run: yarn test
 
  deploy:
    name: build && push image to Docker hub
    runs-on: ubuntu-latest
    # needs: lint-test
 
    steps:
      - uses: actions/checkout@v4
 
      - name: import env file
        run: |
          touch ./.env && echo "$env_master" >> ./.env
 
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
 
      - name: docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
 
 
      - name: Read package version
        id: get-version
        run: |
          echo "PACKAGE_VERSION=$(node -p -e "require('./package.json').version")" >> $GITHUB_ENV

      - name: build && push 
        id: build-push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}
          tags: |
            geesunandan/sample-node:${{ env.PACKAGE_VERSION }}
            geesunandan/sample-node:master

      - name: Update Docker Stack
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            export IMAGE_TAG=${{ env.PACKAGE_VERSION }}
            docker stack deploy -c docker-stack.yml app
